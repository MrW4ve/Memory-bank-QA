---
description: 
globs: 
alwaysApply: false
---
# BEHAVIOR-FIRST WORKFLOW TEMPLATE

üéØ HYBRID BDD/TDD INTEGRATION FOR AI/LLM DEVELOPMENT üéØ
Efficient workflow bridging Behavior-Driven and Test-Driven Development

> **TL;DR:** Strategic behavior verification followed by lightweight testing to prevent AI/LLM cognitive bias and ensure reliable implementation.

## üîÑ BEHAVIOR-FIRST WORKFLOW PROCESS

```mermaid
graph TD
    subgraph "Phase 1: Behavior Definition"
        BD1["Define Component<br>Expected Behavior"]
        BD2["Create Behavior<br>Specification"]
        BD3["Identify Success<br>Criteria"]
    end
    
    subgraph "Phase 2: AI Understanding Verification"
        UV1["Verify AI Understands<br>Intended Behavior"]
        UV2["Check Context<br>Preservation"]
        UV3["Validate Implementation<br>Approach"]
    end
    
    subgraph "Phase 3: Strategic Test Points"
        ST1["Identify Critical<br>Test Points"]
        ST2["Define Minimal<br>Test Coverage"]
        ST3["Create Validation<br>Checkpoints"]
    end
    
    subgraph "Phase 4: Implementation & Validation"
        IV1["Rapid Implementation<br>with Checkpoints"]
        IV2["Real-time Behavior<br>Validation"]
        IV3["Post-Implementation<br>Verification"]
    end
    
    BD1 --> BD2 --> BD3 --> UV1
    UV1 --> UV2 --> UV3 --> ST1
    ST1 --> ST2 --> ST3 --> IV1
    IV1 --> IV2 --> IV3
    
    style BD2 fill:#4da6ff,stroke:#0066cc,color:white
    style UV1 fill:#ff5555,stroke:#dd3333,color:white
    style ST2 fill:#10b981,stroke:#059669,color:white
    style IV2 fill:#ffa64d,stroke:#cc7a30,color:white
```

## üìã BEHAVIOR SPECIFICATION TEMPLATE

```
## COMPONENT BEHAVIOR SPECIFICATION

### Component Information
**Component Name**: [Name]
**Purpose**: [Primary function]
**Context**: [How it fits in the system]

### Expected Behavior
**Primary Function**: [What it should do]
**Input Requirements**: [What inputs it expects]
**Output Expectations**: [What outputs it should produce]
**Side Effects**: [Any system state changes]

### Success Criteria
**Functional Success**: [How to verify correct function]
**Performance Success**: [Performance expectations]
**Integration Success**: [How it works with other components]
**Error Handling**: [How it handles failure cases]

### Failure Scenarios
**Input Validation Failures**: [Invalid input handling]
**Processing Failures**: [Internal error scenarios]
**Integration Failures**: [External dependency issues]
**Resource Failures**: [Memory, network, storage issues]

### Dependencies
**Required Components**: [What it depends on]
**Required Resources**: [System resources needed]
**Configuration Dependencies**: [Settings/environment requirements]
```

## üîç AI UNDERSTANDING VERIFICATION CHECKLIST

```
## AI UNDERSTANDING VERIFICATION

### Intent Verification
‚ñ° AI correctly explains component purpose
‚ñ° AI identifies primary function accurately
‚ñ° AI understands context and integration points
‚ñ° AI recognizes success criteria

### Implementation Understanding
‚ñ° AI proposes appropriate implementation approach
‚ñ° AI identifies potential technical challenges
‚ñ° AI recognizes resource requirements
‚ñ° AI understands performance implications

### Risk Awareness
‚ñ° AI identifies realistic failure scenarios
‚ñ° AI recognizes edge cases and constraints
‚ñ° AI understands error handling requirements
‚ñ° AI shows awareness of integration risks

### Context Preservation
‚ñ° AI maintains awareness of project goals
‚ñ° AI remembers previously discussed decisions
‚ñ° AI uses consistent terminology
‚ñ° AI respects established constraints
```

## üéØ STRATEGIC TEST POINTS TEMPLATE

```
## STRATEGIC TEST POINTS IDENTIFICATION

### Critical Path Testing
**Core Functionality Tests**:
- [Test 1]: [Why critical to verify]
- [Test 2]: [Why critical to verify]
- [Test 3]: [Why critical to verify]

**Integration Point Tests**:
- [Integration Test 1]: [Interface verification]
- [Integration Test 2]: [Data flow verification]
- [Integration Test 3]: [Error propagation verification]

### Edge Case Testing
**Boundary Conditions**:
- [Boundary 1]: [Minimum/maximum values]
- [Boundary 2]: [Empty/null inputs]
- [Boundary 3]: [Resource limits]

**Error Conditions**:
- [Error 1]: [Invalid input handling]
- [Error 2]: [Resource unavailability]
- [Error 3]: [Dependency failures]

### Performance Validation
**Response Time**: [Acceptable performance thresholds]
**Resource Usage**: [Memory/CPU/storage limits]
**Scalability**: [Load handling requirements]
```

## ‚ö° RAPID IMPLEMENTATION CHECKPOINTS

```
## IMPLEMENTATION CHECKPOINT SYSTEM

### Pre-Implementation Checkpoint
‚ñ° Behavior specification complete and verified
‚ñ° AI understanding confirmed through verification
‚ñ° Strategic test points identified and documented
‚ñ° Implementation approach validated

### During Implementation Checkpoints
‚ñ° **25% Complete**: Basic structure matches behavior specification
‚ñ° **50% Complete**: Core functionality demonstrates expected behavior
‚ñ° **75% Complete**: Integration points function as specified
‚ñ° **90% Complete**: Error handling matches failure scenarios

### Post-Implementation Checkpoint
‚ñ° All strategic test points pass
‚ñ° Behavior specification requirements met
‚ñ° Integration with existing system confirmed
‚ñ° Performance criteria satisfied
‚ñ° Error handling validated
```

## üîÑ WORKFLOW INTEGRATION WITH MEMORY BANK

```mermaid
graph TD
    subgraph "Memory Bank Mode Integration"
        PLAN["PLAN Mode<br>Behavior Definition"]
        CREATIVE["CREATIVE Mode<br>AI Verification"]
        IMPLEMENT["IMPLEMENT Mode<br>Rapid Implementation"]
    end
    
    subgraph "Workflow Phases"
        BEH["Behavior<br>Specification"]
        VERIFY["AI Understanding<br>Verification"]
        TEST["Strategic<br>Testing"]
        IMPL["Implementation<br>& Validation"]
    end
    
    PLAN --> BEH
    BEH --> CREATIVE
    CREATIVE --> VERIFY
    VERIFY --> TEST
    TEST --> IMPLEMENT
    IMPLEMENT --> IMPL
    
    style BEH fill:#4da6ff,stroke:#0066cc,color:white
    style VERIFY fill:#ff5555,stroke:#dd3333,color:white
    style TEST fill:#10b981,stroke:#059669,color:white
    style IMPL fill:#ffa64d,stroke:#cc7a30,color:white
```

## üìä EFFICIENCY METRICS

**Token Optimization**:
- Behavior verification: ~3 targeted queries vs traditional extensive testing
- AI understanding check: 1 focused verification vs multiple test iterations
- Strategic testing: ~5 critical tests vs comprehensive test suites

**Time Savings**:
- 60% reduction in verification cycles
- 40% faster implementation due to early issue detection
- 70% reduction in debugging time due to behavior-first approach

**Quality Improvements**:
- Early detection of AI misunderstanding
- Reduced cascading bugs from implementation errors
- Better alignment between requirements and implementation

## üîó TEMPLATE USAGE GUIDELINES

### **For Level 1 Tasks**: Use simplified behavior specification
### **For Level 2 Tasks**: Include strategic test points
### **For Level 3 Tasks**: Full workflow with AI verification
### **For Level 4 Tasks**: Multiple components with integration focus

## ‚úÖ WORKFLOW VALIDATION

**Behavior-First Workflow Checklist:**
‚ñ° Template supports all complexity levels
‚ñ° Integration with Memory Bank modes defined
‚ñ° AI understanding verification included
‚ñ° Strategic testing approach documented
‚ñ° Efficiency benefits quantified
‚ñ° Usage guidelines provided
