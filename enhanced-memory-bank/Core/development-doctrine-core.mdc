---
description: 
globs: 
alwaysApply: false
---
# DEVELOPMENT DOCTRINE CORE - CHECKPOINT-DRIVEN VALIDATION FRAMEWORK

üö® CORE PRINCIPLE: BEHAVIOR VERIFICATION BEFORE IMPLEMENTATION üö®
This framework implements hybrid BDD/TDD workflow to address AI/LLM limitations

> **TL;DR:** Strategic validation checkpoints at critical decision points to prevent AI/LLM cognitive bias, hallucinations, and cascading implementation errors.

## üèóÔ∏è CHECKPOINT-DRIVEN ARCHITECTURE

```mermaid
graph TD
    subgraph "Core Validation Framework"
        VF["Validation Framework<br>Core Engine"]
        CP["Checkpoint<br>Registry"]
        ST["State<br>Tracker"]
        RB["Rollback<br>Manager"]
    end
    
    subgraph "Validation Checkpoints"
        TC["Task Complexity<br>Validation"]
        BV["Behavior<br>Verification"]
        CC["Code Quality<br>Checkpoint"]
        IV["Implementation<br>Validation"]
    end
    
    subgraph "Integration Points"
        VAN["VAN Mode<br>Checkpoints"]
        PLAN["PLAN Mode<br>Checkpoints"]
        CREATIVE["CREATIVE Mode<br>Checkpoints"]
        IMPLEMENT["IMPLEMENT Mode<br>Checkpoints"]
    end
    
    VF --> CP --> ST --> RB
    CP --> TC --> BV --> CC --> IV
    TC --> VAN
    BV --> PLAN
    CC --> CREATIVE
    IV --> IMPLEMENT
    
    style VF fill:#ff5555,stroke:#dd3333,color:white
    style CP fill:#4da6ff,stroke:#0066cc,color:white
    style ST fill:#10b981,stroke:#059669,color:white
    style RB fill:#ffa64d,stroke:#cc7a30,color:white
```

## üîç BEHAVIORAL VERIFICATION QUERIES

Strategic queries to verify AI/LLM understanding at critical decision points:

### **Intent Verification Template**
```
BEHAVIOR VERIFICATION CHECKPOINT
Component: [Component Name]

Q1: "Explain in your own words what this component should accomplish."
Expected: [Clear behavior description matching requirements]

Q2: "What is the primary purpose of this functionality?"
Expected: [Purpose alignment with project goals]

Q3: "How does this component serve the overall project goals?"
Expected: [Context awareness and integration understanding]

VALIDATION CRITERIA:
‚ñ° Matches intended behavior description
‚ñ° Demonstrates understanding of purpose  
‚ñ° Shows awareness of broader context
```

### **Failure Analysis Template**
```
FAILURE ANALYSIS CHECKPOINT
Component: [Component Name]

Q1: "What are the most likely ways this component could fail?"
Expected: [Realistic failure scenarios]

Q2: "What edge cases should we be concerned about?"
Expected: [Appropriate edge case identification]

Q3: "What would happen if this component behaved incorrectly?"
Expected: [Understanding of failure impact]

VALIDATION CRITERIA:
‚ñ° Identifies realistic failure scenarios
‚ñ° Shows understanding of dependencies
‚ñ° Demonstrates risk awareness
```

### **Success Criteria Template**
```
SUCCESS CRITERIA CHECKPOINT  
Component: [Component Name]

Q1: "How would you verify that this component is working correctly?"
Expected: [Appropriate verification methods]

Q2: "What tests would you create to validate this functionality?"
Expected: [Strategic test point identification]

Q3: "What observable behaviors indicate successful implementation?"
Expected: [Clear success indicators]

VALIDATION CRITERIA:
‚ñ° Proposes appropriate verification methods
‚ñ° Understands success indicators
‚ñ° Shows practical testing awareness
```

## üö® RED FLAG DETECTION SYSTEM

Automated detection of AI/LLM cognitive issues:

### **Hallucination Indicators**
- References to non-existent components or features
- Inconsistent behavior descriptions
- Impossible technical approaches
- Contradictory statements within responses

### **Context Loss Indicators**
- Generic responses not specific to the project
- Missing awareness of established constraints
- Forgetting previously discussed decisions
- Inconsistent terminology usage

### **Cognitive Bias Indicators**
- Overconfident assertions without justification
- Ignoring mentioned edge cases or constraints
- Simplistic solutions to complex problems
- Dismissing valid concerns without analysis

## üîÑ CHECKPOINT INTEGRATION PROTOCOL

### **Mode Transition Checkpoints**
```mermaid
graph LR
    VAN["VAN Mode"] --> VANCP["‚õî VAN<br>Checkpoint"]
    VANCP --> PLAN["PLAN Mode"]
    PLAN --> PLANCP["‚õî PLAN<br>Checkpoint"] 
    PLANCP --> CREATIVE["CREATIVE Mode"]
    CREATIVE --> CREATIVECP["‚õî CREATIVE<br>Checkpoint"]
    CREATIVECP --> IMPLEMENT["IMPLEMENT Mode"]
    
    style VANCP fill:#ff5555,stroke:#dd3333,color:white
    style PLANCP fill:#ff5555,stroke:#dd3333,color:white  
    style CREATIVECP fill:#ff5555,stroke:#dd3333,color:white
```

### **Checkpoint Validation Process**
1. **Trigger**: Mode transition request
2. **Execute**: Behavioral verification queries for current phase
3. **Analyze**: Response validation against criteria
4. **Decision**: Pass/Fail determination
5. **Action**: Proceed or rollback with corrective guidance

## üìã IMPLEMENTATION GUIDELINES

### **Phase 1: Core Framework**
- Create checkpoint registry system
- Implement basic state tracking
- Develop behavioral query templates
- Create red flag detection patterns

### **Phase 2: Mode Integration**
- Enhance existing mode transition points
- Integrate verification queries into workflows
- Implement rollback procedures
- Create validation reporting system

### **Phase 3: Advanced Features**
- AI understanding verification algorithms
- Context preservation mechanisms
- Cognitive bias detection and mitigation
- Comprehensive validation reporting

## ‚úÖ FRAMEWORK VERIFICATION

**Core Framework Requirements Checklist:**
‚ñ° Checkpoint-driven architecture implemented
‚ñ° Behavioral verification queries defined
‚ñ° Red flag detection system created
‚ñ° Mode integration protocol established
‚ñ° Implementation guidelines documented
‚ñ° Backward compatibility maintained

## üîó INTEGRATION TOUCHPOINTS

This core framework integrates with:
- **Enhanced Mode Instructions**: Checkpoint-aware mode transitions
- **Enhanced Visual Maps**: Validation gate integration
- **BDD/TDD Templates**: Behavior-first workflow templates
- **Existing Memory Bank**: Seamless enhancement overlay
